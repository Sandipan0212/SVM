# -*- coding: utf-8 -*-
"""soft_svm1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w8ZStxvOGB_QwOPN9UH7MOU3evQyVc7c
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
# %matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
from scipy import optimize
from sklearn.model_selection import train_test_split
import statistics as st
from cvxopt import matrix, solvers

df=pd.read_csv("/content/heart.csv")

df

X = df.iloc[:,:14]
y =df.iloc[:,-1]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33,random_state=42)
X_train = X_train.values
y_train = y_train.values
X_test = X_test.values
y_test = y_test.values

X_train.shape

y_train.shape

y_train = y_train.reshape(-1,1)

X_d = y_train*X_train
X_d.shape

H = np.dot(X_d,X_d.T)
H.shape
type(H)

C=1.0
m,n = X_train.shape

P = matrix(H)
q = matrix(-np.ones((m,1)))
G = matrix(np.vstack((np.eye(m)*(-1),np.eye(m))))
h = matrix(np.hstack((np.zeros(m), np.ones(m) * C)))
A = matrix(y_train.reshape(1, -1))
b = matrix(np.zeros(1))
A

A = matrix(A, (1, m), 'd')
A

sol = solvers.qp(P, q, G, h, A, b)
alpha = np.array(sol['x'])

alpha.shape

w = ((y_train * alphas).T @ X_train).reshape(-1,1)
S = (alphas > 1e-4).flatten()
b = y_train[S] - np.dot(X_train[S], w)

w.shape

print('w = ', w.flatten())
print('b = ', b[0])

w = w.flatten()
X_test.shape

y_predicted = np.inner(w,X_test)
print(y_predicted.shape)
print(y_predicted)

z=0
for i in range(len(X_test)):
  if (y_predicted[i]*y_test[i])>1:
    z+=1

print("Accuracy :- ",(z/len(X_test))*100)
z

